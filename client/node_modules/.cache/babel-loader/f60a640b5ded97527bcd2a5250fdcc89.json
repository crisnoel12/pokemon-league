{"ast":null,"code":"import*as actionTypes from'./actionTypes';//@ts-ignore\nimport Pokedex from'pokedex-promise-v2';var options={protocol:'https'};var P=new Pokedex(options);// init PokeApi wrapper with options\nexport var fetchPokemonStart=function fetchPokemonStart(){return{type:actionTypes.FETCH_POKEMON_START};};export var fetchPokemonSuccess=function fetchPokemonSuccess(pokemon){return{type:actionTypes.FETCH_POKEMON_SUCCESS,pokemon:pokemon};};export var fetchPokemonFail=function fetchPokemonFail(query){return{type:actionTypes.FETCH_POKEMON_FAIL,query:query};};export var fetchPokemon=function fetchPokemon(query){return function(dispatch){dispatch(fetchPokemonStart());P.getPokemonByName(query.toLowerCase()).then(function(response){return dispatch(fetchPokemonSuccess(response));}).catch(function(error){return dispatch(fetchPokemonFail(query));});};};export var selectPokemon=function selectPokemon(pokemon){return{type:actionTypes.SELECT_POKEMON,pokemon:pokemon};};export var deselectPokemon=function deselectPokemon(){return{type:actionTypes.DESELECT_POKEMON};};export var updatePokemonQuery=function updatePokemonQuery(e){return{type:actionTypes.UPDATE_POKEMON_QUERY,pokemonQuery:e.target.value};};","map":{"version":3,"sources":["/Users/cris/Code/pokemon-league/src/store/actions/PokeAPI/actionCreators.ts"],"names":["actionTypes","Pokedex","options","protocol","P","fetchPokemonStart","type","FETCH_POKEMON_START","fetchPokemonSuccess","pokemon","FETCH_POKEMON_SUCCESS","fetchPokemonFail","query","FETCH_POKEMON_FAIL","fetchPokemon","dispatch","getPokemonByName","toLowerCase","then","response","catch","error","selectPokemon","SELECT_POKEMON","deselectPokemon","DESELECT_POKEMON","updatePokemonQuery","e","UPDATE_POKEMON_QUERY","pokemonQuery","target","value"],"mappings":"AAEA,MAAO,GAAKA,CAAAA,WAAZ,KAA6B,eAA7B,CACA;AACA,MAAOC,CAAAA,OAAP,KAAoB,oBAApB,CAEA,GAAIC,CAAAA,OAAO,CAAE,CACTC,QAAQ,CAAE,OADD,CAAb,CAIA,GAAIC,CAAAA,CAAC,CAAG,GAAIH,CAAAA,OAAJ,CAAYC,OAAZ,CAAR,CAA8B;AAE9B,MAAO,IAAMG,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CACnC,MAAO,CACHC,IAAI,CAAEN,WAAW,CAACO,mBADf,CAAP,CAGH,CAJM,CAMP,MAAO,IAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,OAAD,CAAsB,CACrD,MAAO,CACHH,IAAI,CAAEN,WAAW,CAACU,qBADf,CAEHD,OAAO,CAAPA,OAFG,CAAP,CAIH,CALM,CAOP,MAAO,IAAME,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,KAAD,CAAmB,CAC/C,MAAO,CACHN,IAAI,CAAEN,WAAW,CAACa,kBADf,CAEHD,KAAK,CAALA,KAFG,CAAP,CAIH,CALM,CAOP,MAAO,IAAME,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACF,KAAD,CAAmB,CAC3C,MAAO,UAACG,QAAD,CAAmB,CACtBA,QAAQ,CAACV,iBAAiB,EAAlB,CAAR,CACAD,CAAC,CAACY,gBAAF,CAAmBJ,KAAK,CAACK,WAAN,EAAnB,EACKC,IADL,CACU,SAACC,QAAD,QAAuBJ,CAAAA,QAAQ,CAACP,mBAAmB,CAACW,QAAD,CAApB,CAA/B,EADV,EAEKC,KAFL,CAEW,SAACC,KAAD,QAAgBN,CAAAA,QAAQ,CAACJ,gBAAgB,CAACC,KAAD,CAAjB,CAAxB,EAFX,EAGH,CALD,CAMH,CAPM,CASP,MAAO,IAAMU,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACb,OAAD,CAAsB,CAC/C,MAAO,CACHH,IAAI,CAAEN,WAAW,CAACuB,cADf,CAEHd,OAAO,CAAPA,OAFG,CAAP,CAIH,CALM,CAOP,MAAO,IAAMe,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CACjC,MAAO,CACHlB,IAAI,CAAEN,WAAW,CAACyB,gBADf,CAAP,CAGH,CAJM,CAMP,MAAO,IAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,CAAD,CAA4C,CAC1E,MAAO,CACHrB,IAAI,CAAEN,WAAW,CAAC4B,oBADf,CAEHC,YAAY,CAAEF,CAAC,CAACG,MAAF,CAASC,KAFpB,CAAP,CAKH,CANM","sourcesContent":["import React from 'react';\nimport { POKEMON } from '../../../types';\nimport * as actionTypes from './actionTypes';\n//@ts-ignore\nimport Pokedex from 'pokedex-promise-v2';\n\nlet options ={\n    protocol: 'https'\n}\n\nlet P = new Pokedex(options); // init PokeApi wrapper with options\n\nexport const fetchPokemonStart = () => {\n    return {\n        type: actionTypes.FETCH_POKEMON_START\n    }\n}\n\nexport const fetchPokemonSuccess = (pokemon: POKEMON) => {\n    return {\n        type: actionTypes.FETCH_POKEMON_SUCCESS,\n        pokemon\n    }\n}\n\nexport const fetchPokemonFail = (query: string) => {\n    return {\n        type: actionTypes.FETCH_POKEMON_FAIL,\n        query\n    }\n}\n\nexport const fetchPokemon = (query: string) => {\n    return (dispatch: any) => {\n        dispatch(fetchPokemonStart());\n        P.getPokemonByName(query.toLowerCase())\n            .then((response: POKEMON) => dispatch(fetchPokemonSuccess(response)))\n            .catch((error: any) => dispatch(fetchPokemonFail(query)));\n    }\n}\n\nexport const selectPokemon = (pokemon: POKEMON) => {\n    return {\n        type: actionTypes.SELECT_POKEMON,\n        pokemon\n    }\n}\n\nexport const deselectPokemon = () => {\n    return {\n        type: actionTypes.DESELECT_POKEMON\n    }\n}\n\nexport const updatePokemonQuery = (e: React.ChangeEvent<HTMLInputElement>) => {\n    return {\n        type: actionTypes.UPDATE_POKEMON_QUERY,\n        pokemonQuery: e.target.value\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}