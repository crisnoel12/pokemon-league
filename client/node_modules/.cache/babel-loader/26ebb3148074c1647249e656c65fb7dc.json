{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = \"/api\";\nexport class ApiManager {}\n\nApiManager.signUp = async signUpData => {\n  try {\n    const response = await axios.post(`${BASE_URL}/signup`, signUpData);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\nApiManager.login = async loginData => {\n  try {\n    const response = await axios.post(`${BASE_URL}/login`, loginData);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\nApiManager.checkIsLoggedIn = async () => {\n  try {\n    const response = await axios.get(`${BASE_URL}/is-logged-in`);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\nApiManager.logout = async () => {\n  try {\n    const response = await axios.get(`${BASE_URL}/logout`);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\nApiManager.getCSRFToken = async () => {\n  try {\n    const response = await axios.get(`${BASE_URL}/csrf-token`);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\nApiManager.getProfile = async id => {\n  try {\n    const response = await axios.get(`${BASE_URL}/user/${id}`);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\nApiManager.updateProfile = async (authUser, obj) => {\n  try {\n    const response = await axios.patch(`/api/user/${authUser}`, obj);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\nApiManager.getTrainers = async () => {\n  try {\n    const response = await axios.get(`${BASE_URL}/user`);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};","map":{"version":3,"sources":["/Users/cris/Code/pokemon-league/src/helpers/ApiManager.ts"],"names":["axios","BASE_URL","ApiManager","signUp","signUpData","response","post","error","login","loginData","checkIsLoggedIn","get","logout","getCSRFToken","getProfile","id","updateProfile","authUser","obj","patch","getTrainers"],"mappings":"AAAA,OAAOA,KAAP,MAAmD,OAAnD;AAGA,MAAMC,QAAQ,GAAG,MAAjB;AAEA,OAAO,MAAMC,UAAN,CAAiB;;AAAXA,U,CAEJC,M,GAAS,MAAOC,UAAP,IAAqC;AACnD,MAAI;AACF,UAAMC,QAAuB,GAAG,MAAML,KAAK,CAACM,IAAN,CAA0B,GAAEL,QAAS,SAArC,EAA+CG,UAA/C,CAAtC;AACA,WAAOC,QAAP;AACD,GAHD,CAGE,OAAOE,KAAP,EAAc;AACd,UAAMA,KAAN;AACD;AACF,C;;AATUL,U,CAWJM,K,GAAQ,MAAOC,SAAP,IAAoC;AACjD,MAAI;AACF,UAAMJ,QAAuB,GAAG,MAAML,KAAK,CAACM,IAAN,CAA0B,GAAEL,QAAS,QAArC,EAA8CQ,SAA9C,CAAtC;AACA,WAAOJ,QAAP;AACD,GAHD,CAGE,OAAOE,KAAP,EAAc;AACd,UAAMA,KAAN;AACD;AACF,C;;AAlBUL,U,CAoBJQ,e,GAAkB,YAAY;AACnC,MAAI;AACF,UAAML,QAAuB,GAAG,MAAML,KAAK,CAACW,GAAN,CAAyB,GAAEV,QAAS,eAApC,CAAtC;AACA,WAAOI,QAAP;AACD,GAHD,CAGE,OAAOE,KAAP,EAAc;AACd,UAAMA,KAAN;AACD;AACF,C;;AA3BUL,U,CA6BJU,M,GAAS,YAAY;AAC1B,MAAI;AACF,UAAMP,QAAuB,GAAG,MAAML,KAAK,CAACW,GAAN,CAAyB,GAAEV,QAAS,SAApC,CAAtC;AACA,WAAOI,QAAP;AACD,GAHD,CAGE,OAAOE,KAAP,EAAc;AACd,UAAMA,KAAN;AACD;AACF,C;;AApCUL,U,CAsCJW,Y,GAAe,YAAY;AAChC,MAAI;AACF,UAAMR,QAAuB,GAAG,MAAML,KAAK,CAACW,GAAN,CAAyB,GAAEV,QAAS,aAApC,CAAtC;AACA,WAAOI,QAAP;AACD,GAHD,CAGE,OAAOE,KAAP,EAAc;AACd,UAAMA,KAAN;AACD;AACF,C;;AA7CUL,U,CA+CJY,U,GAAa,MAAOC,EAAP,IAAwB;AAC1C,MAAI;AACF,UAAMV,QAAuB,GAAG,MAAML,KAAK,CAACW,GAAN,CAAyB,GAAEV,QAAS,SAAQc,EAAG,EAA/C,CAAtC;AACA,WAAOV,QAAP;AACD,GAHD,CAGE,OAAOE,KAAP,EAAc;AACd,UAAMA,KAAN;AACD;AACF,C;;AAtDUL,U,CAwDJc,a,GAAgB,OAAOC,QAAP,EAA2BC,GAA3B,KAAkD;AACvE,MAAI;AACF,UAAMb,QAAuB,GAAG,MAAML,KAAK,CAACmB,KAAN,CAA2B,aAAYF,QAAS,EAAhD,EAAmDC,GAAnD,CAAtC;AACA,WAAOb,QAAP;AACD,GAHD,CAGE,OAAOE,KAAP,EAAc;AACd,UAAMA,KAAN;AACD;AACF,C;;AA/DUL,U,CAiEJkB,W,GAAc,YAAY;AAC/B,MAAI;AACF,UAAMf,QAAuB,GAAG,MAAML,KAAK,CAACW,GAAN,CAAyB,GAAEV,QAAS,OAApC,CAAtC;AACA,WAAOI,QAAP;AACD,GAHD,CAGE,OAAOE,KAAP,EAAc;AACd,UAAMA,KAAN;AACD;AACF,C","sourcesContent":["import axios, { AxiosPromise, AxiosResponse } from \"axios\";\nimport { AUTHUSER, USER } from \"../types\";\n\nconst BASE_URL = \"/api\";\n\nexport class ApiManager {\n\n  static signUp = async (signUpData: Partial<USER>) => {\n    try {\n      const response: AxiosResponse = await axios.post<AxiosPromise>(`${BASE_URL}/signup`, signUpData);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static login = async (loginData: Partial<USER>) => {\n    try {\n      const response: AxiosResponse = await axios.post<AxiosPromise>(`${BASE_URL}/login`, loginData);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static checkIsLoggedIn = async () => {\n    try {\n      const response: AxiosResponse = await axios.get<AxiosPromise>(`${BASE_URL}/is-logged-in`);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static logout = async () => {\n    try {\n      const response: AxiosResponse = await axios.get<AxiosPromise>(`${BASE_URL}/logout`);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static getCSRFToken = async () => {\n    try {\n      const response: AxiosResponse = await axios.get<AxiosPromise>(`${BASE_URL}/csrf-token`);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static getProfile = async (id: AUTHUSER) => {\n    try {\n      const response: AxiosResponse = await axios.get<AxiosPromise>(`${BASE_URL}/user/${id}`);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static updateProfile = async (authUser: AUTHUSER, obj: Partial<USER>) => {\n    try {\n      const response: AxiosResponse = await axios.patch<AxiosPromise>(`/api/user/${authUser}`, obj);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static getTrainers = async () => {\n    try {\n      const response: AxiosResponse = await axios.get<AxiosPromise>(`${BASE_URL}/user`);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n}"]},"metadata":{},"sourceType":"module"}